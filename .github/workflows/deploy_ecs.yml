name: 'Push to ECR'

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      ecs-task-definition:
        required: true
        type: string
      container-name:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string

jobs:
  deploy_ecs:
#    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.run_number }}
          ECS_TASK_DEFINITION: ${{ inputs.ecs-task-definition }}
          CONTAINER_NAME: ${{ inputs.container-name }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: $ECS_TASK_DEFINITION
          container-name: $CONTAINER_NAME
          image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          ECS_SERVICE: ${{ inputs.ecs-service }}
          ECS_CLUSTER: ${{ inputs.ecs-cluster }}
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
